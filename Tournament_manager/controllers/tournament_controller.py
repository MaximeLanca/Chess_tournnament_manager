import copyfrom tinydb import TinyDBfrom Tournament_manager.controllers.players_controller import PlayersControllerfrom Tournament_manager.models.tournament import Tournamentfrom Tournament_manager.models.round import Roundfrom Tournament_manager.models.match import Matchfrom Tournament_manager.views.interface import Interfaceclass TournamentController:    def __init__(self):        self.tournament = None        self.round_ = None        self.match = None        self.save_match_list = []        self.players_controller = None    def run(self):        Interface.introduction()        tournament_name = Interface.ask_tournament_name()        tournament_location = Interface.ask_tournament_location()        tournament_start_date = str(Interface.ask_tournament_start_date())        tournament_end_date = str(Interface.ask_tournament_end_date())        number_of_round = Interface.ask_round()        self.players_controller = PlayersController(Interface.ask_number_of_players())        self.players_controller.do_players_list()        players_list = self.players_controller.players_list        self.tournament = Tournament(tournament_name,                                     tournament_location,                                     tournament_start_date,                                     tournament_end_date,                                     number_of_round,                                     players_list,                                     )        self.tournament.save_tournament_db()        Interface.started_tournament(self.tournament.tournament_name)        self.start_tournament()    def speed_run(self):        Interface.second_introduction()        tournament_name = "Quick tournament"        tournament_location = "Paris"        number_of_round = 2        number_of_players = 4        tournament_start_date = "00-00-0000"        tournament_end_date = "00-00-0001"        self.players_controller = PlayersController(number_of_players)        self.players_controller.quick_do_players_list()        self.tournament = Tournament(tournament_name,                                     tournament_location,                                     tournament_start_date,                                     tournament_end_date,                                     number_of_round,                                     self.players_controller.players_list                                     )        self.tournament.save_tournament_db()        Interface.started_tournament(self.tournament.tournament_name)        self.start_tournament()    def specify_match_winner(self, round_):        match = round_.matches        Interface.display_match(match)        answer = Interface().ask_match_winner()        if answer == 4:            print("You have stopped the tournament.")            exit()        else:            match.define_match_winner(answer)    def start_tournament(self):        self.tournament.save_tournament_db()        history_pairs = []        for nb_round in range(1, self.tournament.number_of_round + 1):            players_list_copy = copy.deepcopy(self.tournament.players_list)            Interface.display_round(nb_round)            while players_list_copy:                copied_player_1 = players_list_copy.pop(0)                copied_player_2 = None                for player in players_list_copy:                    if (copied_player_1.chess_national_id, player.chess_national_id) not in history_pairs and (                            player.chess_national_id, copied_player_1.chess_national_id) not in history_pairs:                        copied_player_2 = player                        break                history_pairs = self.save_history_pairs(                    (copied_player_1.chess_national_id, copied_player_2.chess_national_id))                pairs_of_players = self.map_players(copied_player_1, copied_player_2)                matches = Match(pairs_of_players[0], pairs_of_players[1])                matches.save_match_db()                round_ = Round(nb_round, matches)                round_.save_round_db()                self.tournament.add_round(round_)                self.specify_match_winner(round_)                players_list_copy.remove(copied_player_2)                self.players_controller.update_players_score(pairs_of_players)        self.define_tournament_winner()    def map_players(self, copied_player_1, copied_player_2) -> list:        player_1 = None        player_2 = None        while player_1 is None and player_2 is None:            for player in self.tournament.players_list:                if player.chess_national_id == copied_player_1.chess_national_id:                    player_1 = player                elif player.chess_national_id == copied_player_2.chess_national_id:                    player_2 = player                    break                else:                    continue        return [player_1, player_2]    def save_history_pairs(self, pair_of_players):        self.save_match_list.append(pair_of_players)        return self.save_match_list    def define_tournament_winner(self):        self.tournament.players_list.sort(key=lambda x: x.score, reverse=True)        print(f"The tournament winner is: {self.tournament.players_list[0]} with "              f"{self.tournament.players_list[0].score} points")        Interface.players_ranking(self.tournament.tournament_name, self.tournament.players_list)    def load_tournament(self):        db_tournament = TinyDB("../Tournament_manager/data/tournaments/tournament.json")        tournament_data = db_tournament.all()        db_round = TinyDB("../Tournament_manager/data/tournaments/round.json")        round_data = db_round.all()        dict_round = round_data[0]        round_number = dict_round["Round number"]        loaded_players = PlayersController()        players_list = loaded_players.get_db_data_players()        db_match = TinyDB("../Tournament_manager/data/tournaments/match.json")        match_data = db_match.all()        dict_match = match_data[0]        players = []        player_1_chess_national_id = dict_match["Chess national ID Player 1"]        player_2_chess_national_id = dict_match["Chess national ID Player 2"]        for player in players_list:            if (player_1_chess_national_id == player.chess_national_id or                    player_2_chess_national_id == player.chess_national_id):                players.append(player)            else:                continue        loaded_matches = Match(players[0], players[1])        loaded_round_ = Round(round_number, loaded_matches)        loaded_tournament = tournament_data[-1]        self.tournament = Tournament(loaded_tournament['Tournament Name'],                                     loaded_tournament['Tournament location'],                                     loaded_tournament['Start date'],                                     loaded_tournament['End date'],                                     loaded_tournament['Number of round'],                                     players_list,                                     loaded_round_                                     )        Interface.started_tournament(self.tournament.tournament_name)        Interface.display_round(self.tournament.number_of_round)        self.start_tournament()