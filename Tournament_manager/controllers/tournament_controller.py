import copyfrom tinydb import TinyDB, Queryfrom Tournament_manager.controllers.players_controller import PlayersControllerfrom Tournament_manager.models.tournament import Tournamentfrom Tournament_manager.models.round import Roundfrom Tournament_manager.models.match import Matchfrom Tournament_manager.views.interface import Interfaceclass TournamentController:    def __init__(self):        self.tournament = None        self.round_ = None        self.match = None        self.match_history_id = []        self.matches_list = []        self.players_controller = None        self.players_list = []    def run(self):        Interface.introduction()        tournament_name = Interface.ask_tournament_name()        tournament_location = Interface.ask_tournament_location()        tournament_start_date = str(Interface.ask_tournament_start_date())        tournament_end_date = str(Interface.ask_tournament_end_date())        number_of_round = Interface.ask_round()        self.players_controller = PlayersController(Interface.ask_number_of_players())        self.players_controller.get_data_players()        self.players_list = self.players_controller.players_list        players_id = []        for player in self.players_list:            players_id = [player.chess_national_id]        self.tournament = Tournament(tournament_name,                                     tournament_location,                                     tournament_start_date,                                     tournament_end_date,                                     number_of_round,                                     players_id,                                     )        current_match = False        Interface.started_tournament(self.tournament.tournament_name)        self.start_tournament(current_match)    def speed_run(self):        Interface.second_introduction()        tournament_name = "Quick tournament"        tournament_location = "Paris"        number_of_round = 2        number_of_players = 4        tournament_start_date = "00-00-0000"        tournament_end_date = "00-00-0001"        self.players_controller = PlayersController(number_of_players)        self.players_list = self.players_controller.quick_do_players_list()        players_id = []        for player in self.players_list:            players_id.append(player.chess_national_id)        self.tournament = Tournament(tournament_name,                                     tournament_location,                                     tournament_start_date,                                     tournament_end_date,                                     number_of_round,                                     players_id,                                     )        current_match = False        Interface.started_tournament(self.tournament.tournament_name)        self.start_tournament(current_match)    def start_tournament(self, current_match: bool):        """Star tournament with the new matches or loaded matches according to argument 'current_match'.        Args :            current_match: Type Boolean. Determine if a match has been loaded.        """        history_pairs = self.matches_list        if current_match is False:            for nb_round in range(1, self.tournament.number_of_round + 1):                self.round_ = Round(nb_round)                self.define_players_for_match(nb_round, history_pairs, current_match)                self.round_.save_round_db()                saved_round = Round.get_data_round_db()                self.tournament.round_history.append(saved_round)                self.tournament.save_tournament_db()        else:            loaded_round = self.tournament.round_history            history_pairs.append(self.matches_list)            self.define_players_for_match(loaded_round, history_pairs, current_match)        self.define_tournament_winner()    def define_players_for_match(self, nb_round: int, history_pairs: list, current_match: bool):        """Define players for matches.            Save history pairs to avoid duplication of matches and save the tournament        Args :            nb_round : Round number in tournament            history_pairs : played marches for history            current_match : determine if a match has been loaded        """        players_list_copy = copy.deepcopy(self.players_list)        Interface.display_round(nb_round)        while players_list_copy:            copied_player_1 = players_list_copy.pop(0)            copied_player_2 = None            for player in players_list_copy:                if (copied_player_1.chess_national_id, player.chess_national_id) not in history_pairs and (                        player.chess_national_id, copied_player_1.chess_national_id) not in history_pairs:                    copied_player_2 = player                    break            if current_match:                for player in players_list_copy:                    if player.chess_national_id == history_pairs[0]:                        copied_player_1 = player                    if player.chess_national_id == history_pairs[1]:                        copied_player_2 = player            chess_national_id_players = (copied_player_1.chess_national_id, copied_player_2.chess_national_id)            history_pairs = self.save_history_pairs(chess_national_id_players)            pairs_of_players = self.map_players(copied_player_1, copied_player_2)            match = Match(pairs_of_players[0], pairs_of_players[1])            self.round_.matches = match            # self.tournament.save_tournament_db()            self.ask_match_situation(match)            match.save_match_db()            self.get_data_matches_db()            players_list_copy.remove(copied_player_2)            if self.players_controller is None:                self.players_controller = PlayersController()    def map_players(self, copied_player_1: object, copied_player_2: object) -> object:        """map players between original list and copied list with chess national ID data        Arg:            copied_player_1: Copied player 1            copied_player_2: Copied player 2        Returns:            List of original players ( Object)        """        player_1 = None        player_2 = None        while player_1 is None and player_2 is None:            for player in self.players_list:                if player.chess_national_id == copied_player_1.chess_national_id:                    player_1 = player                elif player.chess_national_id == copied_player_2.chess_national_id:                    player_2 = player                    break                else:                    continue        return [player_1, player_2]    def get_data_matches_db(self):        db = TinyDB("../Tournament_manager/data/tournaments/matches.json")        last_match = db.all()[-1]        match_id = last_match.doc_id        matches_list_id = self.round_.matches_list        matches_list_id.append(match_id)        self.tournament.match_history = matches_list_id    def save_history_pairs(self, pair_of_players):        self.matches_list.append(pair_of_players)        history_pairs = self.matches_list        return history_pairs    def ask_match_situation(self, matches: object):        Interface.display_match(matches)        answer = Interface().ask_match_winner()        if answer == 4:            print("You have stopped the tournament.")            exit()        else:            matches.define_match_winner(answer)            matches.player_1.update_players_score()            matches.player_2.update_players_score()    def define_tournament_winner(self):        self.players_list.sort(key=lambda x: x.score, reverse=True)        print(f"The tournament winner is: {self.players_list[0]} with "              f"{self.players_list[0].score} points")        Interface.players_ranking(self.tournament.tournament_name, self.players_list)    def load_tournament(self):        requested_tournament = Interface.ask_tournament_for_to_load()        query = Query()        db = TinyDB("../Tournament_manager/data/tournaments/tournament.json")        searched_tournament = db.search(query.Tournament_name == requested_tournament)        # loaded_tournament = searched_tournament[0]        rounds_id = searched_tournament[0]['Round_history']        loaded_rounds_id = []        for rd in rounds_id:            loaded_rounds_id.append(rd[0])        loaded_rounds = []        for id_ in loaded_rounds_id:            db = TinyDB("../Tournament_manager/data/tournaments/round.json")            loaded_rounds = db.get(doc_id=id_)        last_round = loaded_rounds['Round']        self.round_ = Round(last_round)        loaded_history_matches = []        loaded_current_match = []        matches_id = loaded_rounds['Matches']        for id_ in matches_id:            db = TinyDB("../Tournament_manager/data/tournaments/matches.json")            data_match = db.get(doc_id=id_)            if data_match['Winner'] == None:                loaded_current_match.append(data_match['Chess_national_ID_Player_1'])                loaded_current_match.append(data_match['Chess_national_ID_Player_2'])            else:                loaded_history_matches.append(data_match['Chess_national_ID_Player_1'])                loaded_history_matches.append(data_match['Chess_national_ID_Player_2'])            loaded_history_matches.append(data_match)            self.matches_list = loaded_history_matches            self.round_.matches = loaded_current_match        self.tournament = Tournament(searched_tournament[0]['Tournament_name'],                                     searched_tournament[0]['Tournament_location'],                                     searched_tournament[0]['Start_date'],                                     searched_tournament[0]['End_date'],                                     searched_tournament[0]['Number_of_round'],                                     searched_tournament[0]["Players_ID"],                                     )        loaded_players = PlayersController()        self.players_list = loaded_players.get_db_data_players(self.tournament.players_id)        self.start_tournament(current_match=True)        Interface.started_tournament(self.tournament.tournament_name)    def check_loaded_tournament_name(self, tournament_name):        requested_tournament = Tournament.from_dict(tournament_name)        while True:            if requested_tournament:                return requested_tournament            else:                answer = Interface.report_tournament_error(tournament_name)                if answer == "t":                    self.load_tournament()                elif answer == "e":                    exit()                else:                    print("Not valid answer ")